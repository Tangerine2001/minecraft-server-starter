import { z } from "zod";

export const serverPropsSchema = z.object({
    "accepts-transfers": z.coerce.boolean().default(false),
    "allow-flight": z.coerce.boolean(),
    "allow-nether": z.coerce.boolean(),
    "broadcast-console-to-ops": z.coerce.boolean(),
    "broadcast-rcon-to-ops": z.coerce.boolean(),
    difficulty: z.enum(["peaceful", "easy", "normal", "hard"]).default("easy"),
    "enable-command-block": z.coerce.boolean(),
    "enable-jmx-monitoring": z.coerce.boolean(),
    "enable-query": z.coerce.boolean(),
    "enable-rcon": z.coerce.boolean(),
    "enable-status": z.coerce.boolean(),
    "enforce-secure-profile": z.coerce.boolean(),
    "enforce-whitelist": z.coerce.boolean(),
    "entity-broadcast-range-percentage": z.coerce.number().int().min(0).max(1000),
    "force-gamemode": z.coerce.boolean(),
    "function-permission-level": z.coerce.number().int().min(1).max(4),
    gamemode: z.enum(["survival", "creative", "adventure", "spectator"]).default("survival"),
    "generate-structures": z.coerce.boolean(),
    "generator-settings": z.string(), // json-ish string, keep as string unless you want to parse JSON
    hardcore: z.coerce.boolean(),
    "hide-online-players": z.coerce.boolean(),
    "initial-disabled-packs": z.string().default(""),
    "initial-enabled-packs": z.string().default("vanilla"),
    "level-name": z.string(),
    "level-seed": z.string().default(""),
    "level-type": z.string(), // e.g. "minecraft:normal"
    "log-ips": z.coerce.boolean(),
    "max-chained-neighbor-updates": z.coerce.number().int(),
    "max-players": z.coerce.number().int().min(1),
    "max-tick-time": z.coerce.number().int(),
    "max-world-size": z.coerce.number().int(),
    motd: z.string(),
    "network-compression-threshold": z.coerce.number().int(),
    "online-mode": z.coerce.boolean(),
    "op-permission-level": z.coerce.number().int().min(1).max(4),
    "pause-when-empty-seconds": z.coerce.number().int().min(0),
    "player-idle-timeout": z.coerce.number().int().min(0),
    "prevent-proxy-connections": z.coerce.boolean(),
    pvp: z.coerce.boolean(),
    "query.port": z.coerce.number().int(),
    "rate-limit": z.coerce.number().int(),
    "rcon.password": z.string().default(""),
    "rcon.port": z.coerce.number().int(),
    "region-file-compression": z.enum(["deflate","lz4","zstd"]).default("deflate"),
    "require-resource-pack": z.coerce.boolean(),
    "resource-pack": z.string().default(""),
    "resource-pack-id": z.string().default(""),
    "resource-pack-prompt": z.string().default(""),
    "resource-pack-sha1": z.string().default(""),
    "server-ip": z.string().default(""),
    "server-port": z.coerce.number().int(),
    "simulation-distance": z.coerce.number().int(),
    "spawn-monsters": z.coerce.boolean(),
    "spawn-protection": z.coerce.number().int(),
    "sync-chunk-writes": z.coerce.boolean(),
    "text-filtering-config": z.string().default(""),
    "text-filtering-version": z.coerce.number().int().default(0),
    "use-native-transport": z.coerce.boolean(),
    "view-distance": z.coerce.number().int(),
    "white-list": z.coerce.boolean(),
})
    .loose(); // <-- allow unknown future keys

export type KnownServerProps = z.infer<typeof serverPropsSchema>;
